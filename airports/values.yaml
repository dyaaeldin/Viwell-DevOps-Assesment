
## Define the application name 
application:
  name: airports

replicaCount: 1

appEnvs:
appSecrets:

init:
  useInitContainers: "false"
  initContainers:
    - name: check mongo
      image: busybox:1.28
      command: ['sh', '-c', 'until nc -z -v -w5 <ip> <port>; do inform "Wait until dependencies ready..."; sleep 5; done']

image:
  repository: quay.io/dyaaahmed/airports
  pullPolicy: Always
  tag: "1.0.1"

imagePullSecrets: "regcred"
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 8080


ingress:
  enabled: true
  className: "nginx"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: airports.demo.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: tls-cert
      hosts:
        - airports.demo.local

resources:
  limits:
    cpu: 2000m
    memory: 8048Mi
  requests:
    cpu: 2000m
    memory: 2048Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80


persistence:
  enabled: "false"
  volumes:
    - name: volume1
      mountPath: /mnt
      pvcName: pvc1
      size: 8Gi
      accessModes: ReadWriteOnce
      storageClass: "standard"

probeEnabled: true
livenessProbe:
  httpGet:
    path: /health/live
    port: http
readinessProbe:
  httpGet:
    path: /health/ready
    port: http

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: 
  env: demo

tolerations: []

affinity: {}
